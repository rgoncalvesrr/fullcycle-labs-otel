services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./.docker/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:9090/-/healthy || exit 1" ]
      start_interval: 2s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - weather-api-otel

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:3000/api/health || exit 1" ]
      start_interval: 2s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - weather-api-otel

  zipkin:
    container_name: zipkin
    hostname: zipkin
    restart: always
    image: openzipkin/zipkin:latest
    ports:
      - 9411:9411 # Port used for the Zipkin UI and HTTP Api
    environment:
      - STORAGE_TYPE=mem
      - JAVA_OPTS=-Xms1024m -Xmx1024m -XX:+ExitOnOutOfMemoryError
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:9411/health || exit 1" ]
      start_interval: 2s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - weather-api-otel

  otel-collector:
    container_name: otel-collector
    hostname: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    restart: always
    command: [ "--config=/etc/otelcol/config.yaml" ]
    ports:
      - 1888:1888   # pprof extension
      - 8888:8888   # Prometheus metrics exposed by the collector
      - 8889:8889   # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317   # OTLP gRPC receiver
      - 4318:4318
      - 55679:55679 # zpages extension
    volumes:
      - ./.docker/otel-collector.yaml:/etc/otelcol/config.yaml
    networks:
      - weather-api-otel
    depends_on:
      - zipkin

  orchestrator-api:
    container_name: orchestrator-api
    hostname: orchestrator-api
    restart: always
    image: rgoncalvesr/orchestrator-api:latest
    build:
      dockerfile: Dockerfile
      context: .
      tags:
        - rgoncalvesr/orchestrator-api:latest
      args:
        - TARGET_API=orchestrator-api
        - API_PORT=8081
    ports:
      - 8081:8081
    environment:
      - OPEN_TELEMETRY_COLLECTOR_EXPORTER_ENDPOINT=otel-collector:4317
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    env_file:
      - .env
    depends_on:
      - otel-collector
    networks:
      - weather-api-otel

  input-api:
    container_name: input-api
    hostname: input-api
    restart: always
    image: rgoncalvesr/input-api:latest
    build:
      dockerfile: Dockerfile
      context: .
      tags:
        - rgoncalvesr/input-api:latest
      args:
        - TARGET_API=input-api
        - API_PORT=8080
    ports:
      - 8080:8080
    environment:
      - OPEN_TELEMETRY_COLLECTOR_EXPORTER_ENDPOINT=otel-collector:4317
    env_file:
      - .env
    networks:
      - weather-api-otel

networks:
  weather-api-otel:

